@model MiResiliencia.Models.UserEditViewModel

@{
    ViewBag.Title = "UserEdit";
    Layout = "~/Views/Shared/_LayoutSmall.cshtml";
}
<div class="card-body floating-label">
    @using (Html.BeginForm("UserEdit", "Admin", FormMethod.Post, new { @id = "editUserForm", @class = "form insideTab", ic_post_to = "/Admin/UserEdit", ic_target = "#usermanagercontent", ic_on_beforeSend = "validateUserFormUserEdit()" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)
        ;
        <div class="form">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group floating-label">
                @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger  " })
            </div>
            <div class="form-group floating-label">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger  " })
            </div>
            <div class="form-group floating-label">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger  " })
            </div>
            <div class="form-group floating-label">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger  " })
            </div>
            <div class="form-group floating-label">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger  " })
            </div>
            <div class="form-group floating-label">
                @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger  " })
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.isAdmin, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.isAdmin)
                        @Html.ValidationMessageFor(model => model.isAdmin, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="@Resources.Global.Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
</div>

<script type="text/javascript">

    $(document).ready(function () {
        var f = $("#editUserForm");
        $.validator.unobtrusive.parse(f);
    });

    function validateUserFormUserEdit() {

    }

</script>